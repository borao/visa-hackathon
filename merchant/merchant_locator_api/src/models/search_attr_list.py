# coding: utf-8

"""
    Merchant Locator API

    Find Visa accepting merchants around by geolocation

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchAttrList(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, distance=None, merchant_street_address=None, merchant_category_code=None, merchant_name=None, merchant_city=None, merchant_state=None, longitude=None, latitude=None, merchant_country_code=None, distance_unit=None, merchant_postal_code=None):
        """
        SearchAttrList - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'distance': 'int',
            'merchant_street_address': 'str',
            'merchant_category_code': 'str',
            'merchant_name': 'str',
            'merchant_city': 'str',
            'merchant_state': 'str',
            'longitude': 'str',
            'latitude': 'str',
            'merchant_country_code': 'int',
            'distance_unit': 'str',
            'merchant_postal_code': 'str'
        }

        self.attribute_map = {
            'distance': 'Distance',
            'merchant_street_address': 'merchantStreetAddress',
            'merchant_category_code': 'MerchantCategoryCode',
            'merchant_name': 'merchantName',
            'merchant_city': 'merchantCity',
            'merchant_state': 'merchantState',
            'longitude': 'longitude',
            'latitude': 'latitude',
            'merchant_country_code': 'merchantCountryCode',
            'distance_unit': 'DistanceUnit',
            'merchant_postal_code': 'merchantPostalCode'
        }

        self._distance = distance
        self._merchant_street_address = merchant_street_address
        self._merchant_category_code = merchant_category_code
        self._merchant_name = merchant_name
        self._merchant_city = merchant_city
        self._merchant_state = merchant_state
        self._longitude = longitude
        self._latitude = latitude
        self._merchant_country_code = merchant_country_code
        self._distance_unit = distance_unit
        self._merchant_postal_code = merchant_postal_code

    @property
    def distance(self):
        """
        Gets the distance of this SearchAttrList.
        Distance value should be in between 0 to 100

        :return: The distance of this SearchAttrList.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """
        Sets the distance of this SearchAttrList.
        Distance value should be in between 0 to 100

        :param distance: The distance of this SearchAttrList.
        :type: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def merchant_street_address(self):
        """
        Gets the merchant_street_address of this SearchAttrList.
        Address of the registered Merchant

        :return: The merchant_street_address of this SearchAttrList.
        :rtype: str
        """
        return self._merchant_street_address

    @merchant_street_address.setter
    def merchant_street_address(self, merchant_street_address):
        """
        Sets the merchant_street_address of this SearchAttrList.
        Address of the registered Merchant

        :param merchant_street_address: The merchant_street_address of this SearchAttrList.
        :type: str
        """
        if merchant_street_address is None:
            raise ValueError("Invalid value for `merchant_street_address`, must not be `None`")

        self._merchant_street_address = merchant_street_address

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this SearchAttrList.
        Category Code Array of the registered Merchant. Note: Merchant Name or Merchant Category Code is Mandatory, cannot have both. Merchant Category Code can be more than one with a comma separation

        :return: The merchant_category_code of this SearchAttrList.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this SearchAttrList.
        Category Code Array of the registered Merchant. Note: Merchant Name or Merchant Category Code is Mandatory, cannot have both. Merchant Category Code can be more than one with a comma separation

        :param merchant_category_code: The merchant_category_code of this SearchAttrList.
        :type: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_name(self):
        """
        Gets the merchant_name of this SearchAttrList.
        Name of the Merchant or Supplier Name. Note: Optional when any one of VisaMerchantId or VisaStoreId or BusinessRegistrationId or MerchantUrl or AcquirerCardAcceptorId is provided.

        :return: The merchant_name of this SearchAttrList.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """
        Sets the merchant_name of this SearchAttrList.
        Name of the Merchant or Supplier Name. Note: Optional when any one of VisaMerchantId or VisaStoreId or BusinessRegistrationId or MerchantUrl or AcquirerCardAcceptorId is provided.

        :param merchant_name: The merchant_name of this SearchAttrList.
        :type: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")

        self._merchant_name = merchant_name

    @property
    def merchant_city(self):
        """
        Gets the merchant_city of this SearchAttrList.
        City of the registered Merchant

        :return: The merchant_city of this SearchAttrList.
        :rtype: str
        """
        return self._merchant_city

    @merchant_city.setter
    def merchant_city(self, merchant_city):
        """
        Sets the merchant_city of this SearchAttrList.
        City of the registered Merchant

        :param merchant_city: The merchant_city of this SearchAttrList.
        :type: str
        """
        if merchant_city is None:
            raise ValueError("Invalid value for `merchant_city`, must not be `None`")

        self._merchant_city = merchant_city

    @property
    def merchant_state(self):
        """
        Gets the merchant_state of this SearchAttrList.
        State of the registered Merchant. Ex: US

        :return: The merchant_state of this SearchAttrList.
        :rtype: str
        """
        return self._merchant_state

    @merchant_state.setter
    def merchant_state(self, merchant_state):
        """
        Sets the merchant_state of this SearchAttrList.
        State of the registered Merchant. Ex: US

        :param merchant_state: The merchant_state of this SearchAttrList.
        :type: str
        """
        if merchant_state is None:
            raise ValueError("Invalid value for `merchant_state`, must not be `None`")

        self._merchant_state = merchant_state

    @property
    def longitude(self):
        """
        Gets the longitude of this SearchAttrList.
        Longitude value should be  between -180 to +180. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both

        :return: The longitude of this SearchAttrList.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this SearchAttrList.
        Longitude value should be  between -180 to +180. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both

        :param longitude: The longitude of this SearchAttrList.
        :type: str
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def latitude(self):
        """
        Gets the latitude of this SearchAttrList.
        Latitude value should be between -90 to +90. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both

        :return: The latitude of this SearchAttrList.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this SearchAttrList.
        Latitude value should be between -90 to +90. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both

        :param latitude: The latitude of this SearchAttrList.
        :type: str
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def merchant_country_code(self):
        """
        Gets the merchant_country_code of this SearchAttrList.
        Country Code of the registered Merchant. Merchant Country code is mandatory with MerchantName. Note: Optional when Merchant Category Code is provided and Postal code is not provided

        :return: The merchant_country_code of this SearchAttrList.
        :rtype: int
        """
        return self._merchant_country_code

    @merchant_country_code.setter
    def merchant_country_code(self, merchant_country_code):
        """
        Sets the merchant_country_code of this SearchAttrList.
        Country Code of the registered Merchant. Merchant Country code is mandatory with MerchantName. Note: Optional when Merchant Category Code is provided and Postal code is not provided

        :param merchant_country_code: The merchant_country_code of this SearchAttrList.
        :type: int
        """
        if merchant_country_code is None:
            raise ValueError("Invalid value for `merchant_country_code`, must not be `None`")

        self._merchant_country_code = merchant_country_code

    @property
    def distance_unit(self):
        """
        Gets the distance_unit of this SearchAttrList.
        Distance Unit should be either KM/M

        :return: The distance_unit of this SearchAttrList.
        :rtype: str
        """
        return self._distance_unit

    @distance_unit.setter
    def distance_unit(self, distance_unit):
        """
        Sets the distance_unit of this SearchAttrList.
        Distance Unit should be either KM/M

        :param distance_unit: The distance_unit of this SearchAttrList.
        :type: str
        """
        if distance_unit is None:
            raise ValueError("Invalid value for `distance_unit`, must not be `None`")

        self._distance_unit = distance_unit

    @property
    def merchant_postal_code(self):
        """
        Gets the merchant_postal_code of this SearchAttrList.
        Postal Code of the registered Merchant. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both. Merchant Country Code is mandatory with Postal Code.

        :return: The merchant_postal_code of this SearchAttrList.
        :rtype: str
        """
        return self._merchant_postal_code

    @merchant_postal_code.setter
    def merchant_postal_code(self, merchant_postal_code):
        """
        Sets the merchant_postal_code of this SearchAttrList.
        Postal Code of the registered Merchant. Note: Postal Code or (Latitude and Longitude) is mandatory, cannot have both. Merchant Country Code is mandatory with Postal Code.

        :param merchant_postal_code: The merchant_postal_code of this SearchAttrList.
        :type: str
        """
        if merchant_postal_code is None:
            raise ValueError("Invalid value for `merchant_postal_code`, must not be `None`")

        self._merchant_postal_code = merchant_postal_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchAttrList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------